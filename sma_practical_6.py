# -*- coding: utf-8 -*-
"""sma Practical 6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jmWTYUkykJ7nwmjJ7wsURkbEMUjpit46
"""

import pandas as pd

# Create a DataFrame with the extended example data
data = {
    'user_id': [1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 11, 12, 12, 13, 13, 14, 15, 16, 17, 17, 18, 18, 19, 20, 21, 22, 23, 24],
    'friend_id': [2, 3, 4, 5, 3, 4, 5, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 22, 23, 19, 23, 24, 21, 22, 23, 24, 25],
    'age': [25, 28, 24, 30, 22, 26, 29, 31, 27, 23, 33, 28, 29, 26, 24, 30, 32, 29, 26, 28, 25, 27, 31, 29, 22, 24, 23, 30, 26, 28, 25, 27, 31, 29, 22, 33],
    'dob_year': [1997, 1994, 1998, 1992, 2000, 1996, 1993, 1991, 1995, 1999, 1989, 1994, 1993, 1997, 1998, 1992, 1990, 1993, 1996, 1994, 1997, 1995, 1991, 1993, 2000, 1998, 1999, 1992, 1996, 1994, 1997, 1995, 1991, 1993, 2000, 1989]
}

df = pd.DataFrame(data)

# Save the DataFrame to a CSV file
df.to_csv("pseudo_facebook_extended.csv", index=False)

print("CSV file 'pseudo_facebook_extended.csv' generated successfully.")

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

df = pd.read_csv("pseudo_facebook_extended.csv")
df.head()

# Load edge list
fb_graph = nx.from_pandas_edgelist(df, source="age", target="dob_year")

# Add a new edge to the graph
fb_graph.add_edge("123", "2154")

# Display all nodes and edges
fb_graph.nodes()
fb_graph.edges()

# Display the facebook friends network
plt.figure(figsize=(10, 8))
nx.draw(fb_graph, with_labels=True)
plt.show()

# Degree of each node
print("Degree:", nx.degree(fb_graph))

# Degree centrality
print("Degree centrality:",nx.degree_centrality(fb_graph))

# Most influential nodes
m_influential = nx.degree_centrality(fb_graph)
print("Most Influential Node:")
for w in sorted(m_influential, key=m_influential.get, reverse=True):
    print(w, m_influential[w])

# Closeness centrality
closeness_centrality = nx.closeness_centrality(fb_graph)
print("Closeness Centrality:")
print(sorted(closeness_centrality.items(), key=lambda item: item[1], reverse=True)[:8])

# Visualization with node size based on closeness centrality
node_size = [v * 50 for v in closeness_centrality.values()]
plt.figure(figsize=(15, 8))
nx.draw(fb_graph, pos=nx.spring_layout(fb_graph), node_size=node_size, with_labels=False, width=0.15)
plt.axis("off")

# Bridges
bridges = list(nx.bridges(fb_graph))
print("Number of bridges:", len(bridges))

# Visualization with bridges highlighted
plt.figure(figsize=(15, 8))
nx.draw(fb_graph, pos=nx.spring_layout(fb_graph), with_labels=False, width=0.15)
nx.draw_networkx_edges(fb_graph, pos=nx.spring_layout(fb_graph), edgelist=bridges, width=2, edge_color="red")
plt.axis("off")

# Clustering
print("Average Clustering Coefficient:", nx.average_clustering(fb_graph))

plt.show()